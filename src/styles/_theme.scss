@use 'sass:map';
@use 'sass:math';

@use "mixins/config" as config;
@use "mixins/function" as *;
@use "mixins/var" as *;
@use "mixins/color" as *;

@use "variables" as *;


$themesData: () !default;

@mixin update-theme-data($theme, $key, $data) {
        $themesData: map.deep-merge(
                        (
                                $theme: (
                                        $key: $data
                                )
                        ),
                        $themesData
        ) !global;
}

// https://sass-lang.com/documentation/values/maps#immutability
// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level(
        $type,
        $number,
        $mode,
        $mix-color,
        $theme
) {
        // hex mix color
        @include update-theme-data($theme, 'colors',
                        (
                                (
                                        $type: (
                                                '#{$mode}-#{$number}':
                                                mix(
                                                                $mix-color,
                                                                map.get($themesData, $theme, 'colors', $type, 'base'),
                                                                math.percentage(math.div($number, 10))
                                                ),
                                        ),
                                )
                        )
        );

}

@each $theme, $themeColors in $themes {
        // Colors
        @include update-theme-data($theme, 'colors',
                (
                        'white': map.get($themeColors, 'BG-DEFAULT'),
                        'black': map.get($themeColors, 'TEXT-DEFAULT'),
                        'primary': (
                                'base': map.get($themeColors, 'PRIMARY-2'),
                        ),
                        'success': (
                                'base': map.get($themeColors, 'SUCCESS-1'),
                        ),
                        'warning': (
                                'base': map.get($themeColors, 'WARNING-1'),
                        ),
                        'danger': (
                                'base': map.get($themeColors, 'DANGER-1'),
                        ),
                        'error': (
                                'base': map.get($themeColors, 'DANGER-1'),
                        ),
                        'info': (
                                'base': map.get($themeColors, 'INFO-2'),
                        )
                )
        );

        @each $type in $types {
          @each $i in (1, 2, 3, 5, 7, 8, 9) {
            @include set-color-mix-level($type, $i, 'light', map.get($themeColors, 'BG-DEFAULT'), $theme);
          }
        }
        @each $type in $types {
          @each $i in (1, 2, 3, 5, 7, 8, 9) {
            @include set-color-mix-level($type, $i, 'dark', map.get($themeColors, 'TEXT-DEFAULT'), $theme);
          }
        }

        // Bg Color
        @include update-theme-data($theme, 'bg-color',
                (
                        'page': map-get($themeColors, 'BG-DEFAULT'),
                        '': map-get($themeColors, 'BG-DEFAULT'),
                        //'overlay': map-get($themeColors, 'BG-2'),
                )
        );
         //End Bg Color

        // Text Color
        @include update-theme-data($theme, 'text-color',
                (
                        'primary': rgba(map.get($themeColors, 'TEXT-1'), 1),
                        'regular': rgba(map.get($themeColors, 'TEXT-2'), 1),
                        'secondary': rgba(map.get($themeColors, 'TEXT-1'), 0.65),
                        'placeholder': rgba(map.get($themeColors, 'TEXT-1'), 0.55),
                        'disabled': rgba(map.get($themeColors, 'TEXT-1'), 0.4),
                )
        );
        // mix to hex to avoid overlay issues
        @each $key, $val in map.get($themesData, $theme, 'text-color') {
                @if ($key != 'blank') {
                        @include update-theme-data($theme, 'text-color',
                                (
                                        $key: mix-overlay-color($val, map-get($themeColors, 'BG-DEFAULT')),
                                )
                        );
                }
        }
        // End Text color

        // Border Color
        @include update-theme-data($theme, 'border-color',
                (
                        'darker': rgba(map.get($themeColors, 'BORDER-DEFAULT'), 1),
                        'dark': darken(rgba(map.get($themeColors, 'BORDER-DEFAULT'), 0.7), 7%),
                        '': rgba(map.get($themeColors, 'BORDER-DEFAULT'), 0.9),
                        'light': rgba(map.get($themeColors, 'BORDER-DEFAULT'), 0.5),
                        'lighter': rgba(map.get($themeColors, 'BORDER-DEFAULT'), 0.4),
                        'extra-light': rgba(map.get($themeColors, 'BORDER-DEFAULT'), 0.2),
                )
        );
        // mix to hex to avoid overlay issues
        @each $key, $val in map.get($themesData, $theme, 'border-color') {
                @if ($key != 'blank') {
                        @include update-theme-data($theme, 'border-color',
                                (
                                        $key: mix-overlay-color($val, map-get($themeColors, 'BG-DEFAULT')),
                                )
                        );
                }
        }
        // End Border color

        // Fill color
        @include update-theme-data($theme, 'fill-color',
                (
                        'darker': rgba(map.get($themeColors, 'BG-DEFAULT'), 1),
                        'dark': rgba(map.get($themeColors, 'BG-DEFAULT'), 1),
                        '': rgba(map.get($themeColors, 'BG-DEFAULT'), 1),
                        'light': rgba(map.get($themeColors, 'BG-SECONDARY'), 0.25),
                        //'light': rgba(0,0,0, 0.25),
                        'lighter': rgba(map.get($themeColors, 'BG-DEFAULT'), 1),
                        'extra-light': rgba(map.get($themeColors, 'BG-DEFAULT'), 1),
                        'blank': transparent,
                )
        );

        // mix to hex to avoid overlay issues
        @each $key, $val in map.get($themesData, $theme, 'fill-color') {
                @if ($key != 'blank') {
                        @include update-theme-data($theme, 'fill-color',
                                (
                                        $key: mix-overlay-color($val, map-get($themeColors, 'PRIMARY-2')),
                                )
                        );
                }
        }
        // End Fill color

        // Box Shadow color
        @include update-theme-data($theme, 'box-shadow',
                (
                        '': (
                                0px 12px 32px 4px rgba(0, 0, 0, 0.04),
                                0px 8px 20px rgba(0, 0, 0, 0.08),
                        ),
                        'light': (
                                0px 0px 12px rgba(0, 0, 0, 0.12),
                        ),
                        'lighter': (
                                0px 0px 6px rgba(0, 0, 0, 0.12),
                        ),
                        'dark': (
                                0px 16px 48px 16px rgba(0, 0, 0, 0.08),
                                0px 12px 32px rgba(0, 0, 0, 0.12),
                                0px 8px 16px -8px rgba(0, 0, 0, 0.16),
                        ),
                )
        );
        // End Mask color

        // Mask color
        @include update-theme-data($theme, 'mask-color',
                (
                        '': rgba(map.get($themeColors, 'BG-SECONDARY'), 0.8),
                        'extra-light': rgba(map.get($themeColors, 'BG-SECONDARY'), 0.3),
                )
        );
        // End Mask color
}

@each $theme, $themeColors in $themes {
        .theme-#{$theme} {
                @each $themeColor, $value in $themeColors {
                        #{joinVarName(to-lower-case(#{$themeColor}))}: #{$value};
                }

                // hex colors
                @each $type in (primary, success, warning, danger, error, info) {
                        @include set-css-color-type(map.get($themesData, $theme, 'colors'), $type);
                }

                @each $type in (primary, success, warning, danger, error, info) {
                        @include set-css-color-rgb(map.get($themesData, $theme, 'colors'), $type);
                }

                @include set-css-var-value('color-white', map.get($themeColors, 'STATIC-WHITE'));
                @include set-css-var-value('color-black', map.get($themeColors, 'TEXT-DEFAULT'));
                // Hard code to use specific color from Figma
                @include set-css-var-value('color-primary-dark-2', map.get($themeColors, 'PRIMARY-3'));
                @include set-css-var-value('color-primary-dark-3', map.get($themeColors, 'PRIMARY-4'));

                @include set-component-css-var('box-shadow', map.get($themesData, $theme, 'box-shadow'));

                @include set-component-css-var('bg-color', map.get($themesData, $theme, 'bg-color'));
                @include set-component-css-var('text-color', map.get($themesData, $theme, 'text-color'));
                @include set-component-css-var('border-color', map.get($themesData, $theme, 'border-color'));
                @include set-component-css-var('fill-color', map.get($themesData, $theme, 'fill-color'));
                @include set-component-css-var('mask-color', map.get($themesData, $theme, 'mask-color'));

                // Border
                @include set-css-var-value('border-width', $border-width);
                @include set-css-var-value('border-style', $border-style);
                @include set-css-var-value('border-color-hover', $border-color-hover);
                @include set-css-var-value(
                                'border',
                                getCssVar('border-width') getCssVar('border-style')
                                getCssVar('border-color')
                );
        }
}
